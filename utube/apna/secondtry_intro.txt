video 2:

variables:
int 4 byte
char 1 byte
float 4 bytes
bool 1 byte
double 8 bytes

these are called primitive datatypes
arrays and such are non-primitive which we'll talk about later









TypeCasting:

two types: conversion and TypeCasting

conversion is implicit process aka the compiler does in
like if we wanna fit a small data type in a bigger data
like int into double
or converting character into int
like A if put into an int is gonna be 65 as A's askii value is 65


casting is explicit. 
means programmer does this manually

used for converting big to small data type

example:

double price = 200.99
int newPrice = (int)price;

cout newPrice will give us 200









OPERATORS:

arithmetic: +, -, *, /, %
relational: <, <=, >, >=, ==, !=
Logical: OR ||, AND &&, NOT !

UNARY OPERATORS:
increment: ++
decrement: --

a++ paila kaam paxi update
++a paila update paxi kaam







Conditional Statements

if-else:

if (n>0){
    cout << "n is positive\n";
} else if (n == 0) {
    cout << "n is zero\n"; 
} else {
    cout << "n is negative\n";
}


Ternary Statements
condition ? statement 1 : statement2;

condition true vaye st1 chalxa natra st2








Loops:

while(condition){
    statements
}


for (initialization;condition;updation){
    //statements
}

eg.
for(int i = 0; i<=10; i++)



do while loop

do {
    //statements
} while(i<=n);


loop chalauda range 0 ya 1 better hunxa sochney
ani ascending order ma chalaune ki descending ma pani bujhney




RUNNING CODE IN VSCODE

g++ -o outputfilename .\codefilename.cpp
.\outputfilename.exe 






FUNCTION

returnType funName(type p1, type p2 ...){
    // do something
    return ans; // if not void
}

Pass my value:
copy of argument is passed to function 
 

when passing primitive data types they are passed by values
others like Vector, Linkedlist,and Stack are passed by reference which we'll later when we"ll get into that






1's complement:
- 1->0
- 0->1

2's complement:
- 1's complement 
- plus 1




BITWISE OPERATORS

1. Bitwise &   AND


2. Bitwise |    OR


3. Bitwise ^   XOR


4. bitwise left shift operator  <<
a << b is basically a*(2(^b))


5. bitwise right shift operator  >>
in this case a>>b  aka ans = a/(2^b)






operator Precedence:
!, +, - (unary operator)      first (R to L)
*,/,%                         second (L to R)
+, -                          third (L to R)
<,<=,>=,>                     fourth (L to R)
==, !=                        fifth (L to R)
&&                            sixth (L to R)
||                            seventh (L to R)
= (assignment operator)       last (R to L)



Scope
1. Local 
2. Global 



Data Type Modifiers
change meaning of existing data types

- long      : gives greater than 4 bytes
- short     : 2 bytes (jastai human age)
- long long :  
- signed    : positive ni huna sakxa, negative ni huna sakxa, yo normally sab variable ko default hunxa
- unsigned  : thavako bela ki positive matra ho ki negative, jastai customer id ko lagi use garyeu vane double quantity store grna sakinxa


integer ko range 
positive: 0 to (2^31)-1
negative: -2^31


Algorithms are basically ways of performing efficient operations




Arrays:
- can only store same data type
- array is contiguous (ek paxi arko in terms of memory, sequentially) in memory and linear


sizeof(arrayName) gives total space taken by the array

+ infinity = INT_MAX
- infinity = INT_MIN

min(a,b), max(a,b)





Pass by reference:

array lai pathaye vane tyesma function le greko change main ma ni dekhinxa


Vectors: basically array but it's dynamic aka the size is changable

STL Standard Template Library
multiple data structures are implemented
so we use the data structures from STL as a tool

vector, queue, stack, set: are all STL containers



Initializing a vector:-
- vector <int> vec;
- vector <int> vec = {1,2,3};
- vector <int> vec(3,0);        <- first value is size and second is what value is at indexes



we create a special for each loop for vector
for ( int i: vectorName)

here i is not the index but the valuie stored at that index



functions associated with vectors:-
1. vectorName.size()
2. vectorName.push_back(whateverIwannaadd)    aka stack ko push
3. vectorName.pop_back()                    removes last element like stack pop 
4. vectorNamefront()                    <- gives front value
5. vectorName.at(3)                        <- gives value at index 3






Static vs Dynamic Allocation
Static vaneko compile time ma allocate hunxa
Dynamic allocation of memory hunxa run timema

we got 2 kind of memory: stack and heap
static allocation happens in stack
dynamic allocation happens in heap



vector ma naya element push gare jaile ni size double grxa rah naya element add grxa
yesle garda size le number of elements dinxa rah capacity le as name suggests total capacity dinxa
vectorName.capacity() le hamilai space dinxa


