Leetcode 200: Number of islands

# variable name ma jaile galti (don't confuse: r,row,rows)



class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0

        rows, cols = len(grid), len(grid[0])
        visited = set()
        islands = 0

        def bfs(r,c):
            q = collections.deque()
            visited.add((r,c))
            q.append((r,c))

            while q:
                row,col = q.popleft()
                directions = [[1,0],[-1,0],[0,1],[0,-1]]
                for dr, dc in directions:
                    r,c = row+dr, col+dc
                    if (r in range(rows) and
                        c in range(cols) and
                        grid[r][c] == "1" and
                        (r,c) not in visited):
                        q.append((r,c))
                        visited.add((r,c))

                
 
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == "1" and (r,c) not in visited:
                    bfs(r,c) 
                    islands += 1
        return islands

        




Leetcode 752: Lock wala question
# algorithm ma kei samasya ayena
# brackets within children function ma dikat
# visited ko sato deadeng use garey

class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        if "0000" in deadends:
            return -1
        
        def children(lock):
            res = []
            for i in range(4):
                digit = str((int(lock[i]) + 1)%10)
                res.append(lock[:i]+digit+lock[i+1:])
                digit = str((int(lock[i]) - 1 +10)%10)
                res.append(lock[:i]+digit+lock[i+1:])
            return res

        q = deque()
        q.append(["0000",0])
        visit = set(deadends)

        while q: #comtimue while q is non-empty
            lock, turns = q.popleft()
            if lock == target:
                return turns
            for child in children(lock):
                if child not in visit:
                    visit.add(child)
                    q.append([child,turns+1])

        return -1



maximum area of island:

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0

        rows, cols = len(grid), len(grid[0])
        visited = set()
        maxArea = 0

        def bfs(row, col):
            q = deque()
            q.append((row,col))
            visited.add((row,col))
            area = 1

            while q:
                directions = [[1,0],[-1,0],[0,1],[0,-1]]
                r,c = q.popleft()
                
                for dr, dc in directions:
                    row, col = r + dr, c + dc
                    if row in range(rows) and \
                        col in range(cols) and \
                        (row,col) not in visited and \
                        grid[row][col] == 1:
                        q.append((row,col))
                        visited.add((row,col)) 
                        area += 1

            return area





        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 1 and (r,c) not in visited:
                    maxArea = max(maxArea, bfs(r,c))

        return maxArea 
        





CAPTURE PROBLEM:

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        rows, cols = len(board), len(board[0])
        # q = deque()
        visited = set()

        def dfs(r,c):
            if (r<0 or c<0 or r == rows or c == cols or board[r][c] != "O"):
                return
            board[r][c] = "T"
            dfs(r+1,c)
            dfs(r-1,c)
            dfs(r,c+1)
            dfs(r,c-1)

        for r in range(rows):
            if board[r][0] == "O":
                dfs(r,0)
            if board[r][cols-1] == "O":
                dfs(r,cols-1)

        for c in range(cols):
            if board[0][c] == "O":
                dfs(0,c)
            if board[rows-1][c] == "O":
                dfs(rows-1,c)  

        for r in range(rows):
            for c in range(cols):
                if board[r][c] == "T":
                    board[r][c] = "O"
                else:
                    board[r][c] = "X"             

        # return board
                    
          