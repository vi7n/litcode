Leetcode 200: Number of islands

# variable name ma jaile galti (don't confuse: r,row,rows)



class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid:
            return 0

        rows, cols = len(grid), len(grid[0])
        visited = set()
        islands = 0

        def bfs(r,c):
            q = collections.deque()
            visited.add((r,c))
            q.append((r,c))

            while q:
                row,col = q.popleft()
                directions = [[1,0],[-1,0],[0,1],[0,-1]]
                for dr, dc in directions:
                    r,c = row+dr, col+dc
                    if (r in range(rows) and
                        c in range(cols) and
                        grid[r][c] == "1" and
                        (r,c) not in visited):
                        q.append((r,c))
                        visited.add((r,c))

                
 
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == "1" and (r,c) not in visited:
                    bfs(r,c) 
                    islands += 1
        return islands

        




Leetcode 752: Lock wala question
class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        if "0000" in deadends:
            return -1
        
        def children(lock):
            res = []
            for i in range(4):
                digit = str((int(lock[i]) + 1)%10)
                res.append(lock[:i]+digit+lock[i+1:])
                digit = str((int(lock[i]) - 1 +10)%10)
                res.append(lock[:i]+digit+lock[i+1:])
            return res

        q = deque()
        q.append(["0000",0])
        visit = set(deadends)

        while q: #comtimue while q is non-empty
            lock, turns = q.popleft()
            if lock == target:
                return turns
            for child in children(lock):
                if child not in visit:
                    visit.add(child)
                    q.append([child,turns+1])

        return -1